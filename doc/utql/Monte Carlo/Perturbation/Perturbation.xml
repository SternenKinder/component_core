<?xml version="1.0" encoding="UTF-8"?>

<UTQLPatternTemplates xmlns='http://ar.in.tum.de/ubitrack/utql'
                      xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
                      xmlns:xi='http://www.w3.org/2001/XInclude'
                      xmlns:h="http://www.w3.org/1999/xhtml"
                      xsi:schemaLocation='http://ar.in.tum.de/ubitrack/utql ../../../schema/utql_templates.xsd'>
    
    <Pattern name="2DPositionPerturbation" displayName="Perturbation (2D Position)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
        </h:p></Description>

        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>2D Position without noise</h:p></Description>
                <Predicate>type=='2DPosition'</Predicate>
            </Edge>
        </Input>

        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy 2D Position.</h:p></Description>
                <Attribute name="type" value="2DPosition" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>

        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="2DPositionPerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter.</h:p></Description>
            </Attribute>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>


    <Pattern name="2DPositionListPerturbation" displayName="Perturbation (2D Position List)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
        </h:p></Description>

        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>List of 2D Positions without noise</h:p></Description>
                <Predicate>type=='2DPositionList'</Predicate>
            </Edge>
        </Input>

        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy list of 2D Positions.</h:p></Description>
                <Attribute name="type" value="2DPositionList" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>

        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="2DPositionListPerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter</h:p></Description>
            </Attribute>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    <Pattern name="3DPositionPerturbation" displayName="Perturbation (3D Position)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
        </h:p></Description>
    	
        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>3D Position without noise</h:p></Description>
                <Predicate>type=='3DPosition'</Predicate>
            </Edge>
        </Input>
        
        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy 3D Position.</h:p></Description>
                <Attribute name="type" value="3DPosition" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>
        
        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="3DPositionPerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter.</h:p></Description>
            </Attribute>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    
    <Pattern name="3DPositionListPerturbation" displayName="Perturbation (3D Position List)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
        </h:p></Description>
    	
        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>List of 3D Positions without noise</h:p></Description>
                <Predicate>type=='3DPositionList'</Predicate>
            </Edge>
        </Input>
        
        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy list of 3D Positions.</h:p></Description>
                <Attribute name="type" value="3DPositionList" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>
        
        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="3DPositionListPerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter</h:p></Description>
            </Attribute>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    
    <Pattern name="RotationPerturbation" displayName="Perturbation (3D Rotation)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
            <h:br/>
            The component computes a perturbation quaternion as follows:
            First, a random direction is chosen according to a uniformly distributed point on the unit sphere. Then, a random angle is chosen according to a Gaussian distribution with 0 mean and standatrd deviation
            as specified in the <h:code>Rotation standard deviation</h:code> paramter.
            From this axis-angle representation of the orientation, a quaternion is constructed which is ultimately multiplied from the right to the orientation of the <h:code>Input data</h:code> edge. This corresponds to perturbing the orientation before applying the actual orientation.
            <h:br/>
            In case <h:code>Enable quaternion normalization</h:code> is set to false (default), <h:em>no</h:em> normalization is
            performed on the perturbation quaternion and the latter will have the format ((e_x, e_y, e_z,), 1). The result is also called a <h:em>small quaternion</h:em> since as long as the
            imaginary part is small, the norm of the quaternion is almost 1. It is therefore suitable for the representation of a rotational error distribution.
            In other words, quaternions representing orientation should always have norm 1 (unit length). However, to represent a distribution, this is not useful. In fact, building the mean
            of a distribution of normalized quaternions (located exactly on the unit sphere in R4) would yield a quaternion located inside (not on) the unit sphere!
            It is therefore recommended to only use small values for the <h:code>Rotation standard deviation</h:code> parameter as long as
            <h:code>Enable quaternion normalization</h:code> so that the assumption of a small quaternion is justified.
            If you want to produce arbitrary rotations having unit length instead, set <h:code>Enable quaternion normalization</h:code> to <h:code>true</h:code>.
        </h:p></Description>
    	
        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>Rotation without noise</h:p></Description>
                <Predicate>type=='3DRotation'</Predicate>
            </Edge>
        </Input>
        
        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy Rotation.</h:p></Description>
                <Attribute name="type" value="3DRotation" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>
        
        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="RotationPerturbation"/>
            <Attribute name="rotStdDev" displayName="Rotation standard deviation" default="0.0" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic rotational error in degree</h:p></Description>
            </Attribute>
            <Attribute name="enableNormalize" xsi:type="EnumAttributeReferenceType"/>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    
    <Pattern name="PosePerturbation" displayName="Perturbation (Pose)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
            <h:br/>
            The component computes a so called <h:em>small quaternion</h:em> to represent rotational error. It is based on an identity quaternion ((0, 0, 0), 1).
            First, a random direction is chosen according to a uniform distribution. A random angle is chosen according to a Gaussian distribution with 0 mean and standatrd deviation
            as specified in the <h:code>Rotation standard deviation</h:code> paramter.
            Then, the error is added to the imaginary part of the error quaternion, which yields ((e_x, e_y, e_z,), 1).
            Last, the error quaternion is multiplied from the right to the orientation of the <h:code>Input data</h:code> edge. This corresponds to perturbing the orientation before applying the actual orientation.
            <h:br/>
            In case <h:code>Enable quaternion normalization</h:code> is set to false (default), <h:em>no</h:em> normalization is
            performed on the perturbation quaternion and the latter will have the format ((e_x, e_y, e_z,), 1). The result is also called a <h:em>small quaternion</h:em> since as long as the
            imaginary part is small, the norm of the quaternion is almost 1. It is therefore suitable for the representation of a rotational error distribution.
            In other words, quaternions representing orientation should always have norm 1 (unit length). However, to represent a distribution, this is not useful. In fact, building the mean
            of a distribution of normalized quaternions (located exactly on the unit sphere in R4) would yield a quaternion located inside (not on) the unit sphere!
            It is therefore recommended to only use small values for the <h:code>Rotation standard deviation</h:code> parameter as long as
            <h:code>Enable quaternion normalization</h:code> so that the assumption of a small quaternion is justified.
            If you want to produce arbitrary rotations having unit length instead, set <h:code>Enable quaternion normalization</h:code> to <h:code>true</h:code>.
        </h:p></Description>
    	
        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>Pose without noise</h:p></Description>
                <Predicate>type=='6D'</Predicate>
            </Edge>
        </Input>
        
        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy Pose.</h:p></Description>
                <Attribute name="type" value="6D" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>
        
        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="PosePerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter</h:p></Description>
            </Attribute>
            <Attribute name="rotStdDev" displayName="Rotation standard deviation" default="0.0" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic rotational error in degree</h:p></Description>
            </Attribute>
            <Attribute name="enableNormalize" xsi:type="EnumAttributeReferenceType"/>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    <Pattern name="PoseListPerturbation" displayName="Perturbation (Pose List)">
    	<Description><h:p>
            Adds gaussian random noise to the input data. The noise has isotropic scaling.
            <h:br/>
            This component is probably used in conjunction with the <h:code>Covariance Estimation</h:code> component.
            <h:br/>
            The component computes a so called <h:em>small quaternion</h:em> to represent rotational error. It is based on an identity quaternion ((0, 0, 0), 1).
            First, a random direction is chosen according to a uniform distribution. A random angle is chosen according to a Gaussian distribution with 0 mean and standatrd deviation
            as specified in the <h:code>Rotation standard deviation</h:code> paramter.
            Then, the error is added to the imaginary part of the error quaternion, which yields ((e_x, e_y, e_z,), 1).
            Last, the error quaternion is multiplied from the right to the orientation of the <h:code>Input data</h:code> edge. This corresponds to perturbing the orientation before applying the actual orientation.
            <h:br/>
            In case <h:code>Enable quaternion normalization</h:code> is set to false (default), <h:em>no</h:em> normalization is
            performed on the perturbation quaternion and the latter will have the format ((e_x, e_y, e_z,), 1). The result is also called a <h:em>small quaternion</h:em> since as long as the
            imaginary part is small, the norm of the quaternion is almost 1. It is therefore suitable for the representation of a rotational error distribution.
            In other words, quaternions representing orientation should always have norm 1 (unit length). However, to represent a distribution, this is not useful. In fact, building the mean
            of a distribution of normalized quaternions (located exactly on the unit sphere in R4) would yield a quaternion located inside (not on) the unit sphere!
            It is therefore recommended to only use small values for the <h:code>Rotation standard deviation</h:code> parameter as long as
            <h:code>Enable quaternion normalization</h:code> so that the assumption of a small quaternion is justified.
            If you want to produce arbitrary rotations having unit length instead, set <h:code>Enable quaternion normalization</h:code> to <h:code>true</h:code>.
        </h:p></Description>
    	
        <Input>
            <Node name="A" displayName="A"/>
            <Node name="B" displayName="B"/>
            <Edge name="AB" source="A" destination="B" displayName="Input data">
            	<Description><h:p>List of poses without noise</h:p></Description>
                <Predicate>type=='PoseList'</Predicate>
            </Edge>
        </Input>
        
        <Output>
            <Edge name="AB-Perturbed" source="A" destination="B" displayName="Noisy data">
            	<Description><h:p>Noisy list of poses.</h:p></Description>
                <Attribute name="type" value="PoseList" xsi:type="EnumAttributeReferenceType"/>
            </Edge>
        </Output>
        
        <Constraints>
        	<TriggerGroup>
                <Edge edge-ref="AB"/>
                <Edge edge-ref="AB-Perturbed"/>
            </TriggerGroup>
        </Constraints>

        <DataflowConfiguration>
            <UbitrackLib class="PoseListPerturbation"/>
            <Attribute name="posStdDev" displayName="Position standard deviation" default="0.001" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic positional error in meter</h:p></Description>
            </Attribute>
            <Attribute name="rotStdDev" displayName="Rotation standard deviation" default="0.0" min="0.0" xsi:type="DoubleAttributeDeclarationType">
            	<Description><h:p>Standard deviation of isotropic rotational error in degree</h:p></Description>
            </Attribute>
            <Attribute name="enableNormalize" xsi:type="EnumAttributeReferenceType"/>
            <Attribute name="distribution" xsi:type="EnumAttributeReferenceType"/>
        </DataflowConfiguration>
    </Pattern>

    
    <!-- Attribute declarations -->
    
    <GlobalNodeAttributeDeclarations>
        <xi:include href="../../GlobalAttrSpec.xml" xpointer="element(/1/1/1)"/>
    </GlobalNodeAttributeDeclarations>
    
    <GlobalEdgeAttributeDeclarations>
        <xi:include href="../../GlobalAttrSpec.xml" xpointer="element(/1/2/1)"/>
        <xi:include href="../../GlobalAttrSpec.xml" xpointer="element(/1/2/2)"/>
        <xi:include href="../../GlobalAttrSpec.xml" xpointer="element(/1/2/3)"/>
    </GlobalEdgeAttributeDeclarations>
    
    <GlobalDataflowAttributeDeclarations>
        <!-- Unfortunately, the xpointer used in Xinclude is currently restricted to the element scheme and absolute element indices in Xerces (and thus XMLBeans) -->
        <xi:include href="file:GlobalAttrSpec.xml" xpointer="element(/1/3/1)"/>
        <xi:include href="file:GlobalAttrSpec.xml" xpointer="element(/1/3/2)"/>

        <Attribute name="enableNormalize" displayName="Enable quaternion normalization" default="false" xsi:type="EnumAttributeDeclarationType">
            <Description><p xmlns="http://www.w3.org/1999/xhtml">Determines whether the perturbation quaternion shall be normalized (scaled to unit length) or not. For small (error) quaternions that are used in conjunction with the <h:code>CovarianceEstimation</h:code> component, normalization should be disabled. For random sampling of regular orientations for general purposes, e.g. ad-hoc generation of data, normalization must be enabled.</p></Description>
            <EnumValue name="false" displayName="False"/>
            <EnumValue name="true" displayName="True"/>
        </Attribute>
        <Attribute name="distribution" displayName="Random distribution" default="gaussian" xsi:type="EnumAttributeDeclarationType">
            <Description><p xmlns="http://www.w3.org/1999/xhtml">Specifies which random distribution to use. In case of <h:code>Uniform</h:code>, the <h:code>standard deviation</h:code> attribute is converted to an upper/lower bound of the distribution, by a multiplication with &#8730;3</p></Description>
            <EnumValue name="gaussian" displayName="Gaussian"/>
            <EnumValue name="uniform" displayName="Uniform"/>
        </Attribute>
    </GlobalDataflowAttributeDeclarations>
 
    
</UTQLPatternTemplates>
